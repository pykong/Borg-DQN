version: '3.8'

services:
  # Zookeeper service
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - kafka-network
    restart: always

  # Kafka service
  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - kafka-network
      - elk-network
    restart: always

  # Redis service
  redis:
    image: 'redis:latest'
    container_name: 'redis'
    command: redis-server --save 300 1 --dir /data --dbfilename redis.rdb --appendonly no
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    networks:
      - redis-network
    restart: always

  # Environment-Agent service
  game:
    build:
      context: ./game
      dockerfile: Dockerfile
      target: production
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    environment:
      - CONFIG_log_level=ERROR
    networks:
      - kafka-network
      - redis-network
    volumes:
      - model_store:/usr/share/model_store
      - logs:/usr/share/logs
    depends_on:
      - zookeeper
      - kafka
      - redis

  # Memory-Monitor service
  mem_monitor:
    build:
      context: ./mem_monitor
      dockerfile: Dockerfile
      target: production
    networks:
      - kafka-network
      - redis-network
    volumes:
      - logs:/usr/share/logs
    depends_on:
      - zookeeper
      - kafka
      - redis
    restart: always

  # Logstash service
  logstash:
    image: vungle/logstash-kafka-es:latest
    # image: docker.elastic.co/logstash/logstash:7.17.14
    volumes:
      - ./logstash/config:/logstash/config
      - ./logstash/config-tmpl:/logstash/config-tmpl
    depends_on:
      - zookeeper
      - kafka
      - elasticsearch
    networks:
      - kafka-network
      - elk-network

  # Elasticsearch service
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.14
    volumes:
      - esdata:/usr/share/elasticsearch/data
    environment:
      - bootstrap.memory_lock=true
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    mem_limit: 2g
    networks:
      - elk-network
    ports:
      - 9200:9200
    healthcheck:
      test: ["CMD", "curl","-s" ,"-f", "http://localhost:9200/_cat/health"]

  # Kibana service
  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.14
    ports:
      - "5601:5601"
    depends_on:
      elasticsearch: { condition: service_healthy }
    restart: on-failure
    networks:
      - elk-network
    volumes:
      - ./kibana:/usr/local/kibana
    command: /usr/local/kibana/kibana_startup.sh


networks:
  kafka-network:
    driver: bridge
  redis-network:
    driver: bridge
  elk-network:
    driver: bridge

volumes:
  model_store:
    driver: local
  redis-data:
    driver: local
  esdata:
    driver: local
  logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./logs

